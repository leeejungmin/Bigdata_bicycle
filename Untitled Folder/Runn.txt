import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

plt.style.use('ggplot')
mpl.rcParams['axes.unicode_minus'] = False

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

train.info()

figure, ((ax1,ax2),(ax3,ax4)) = plt.subplots(nrows=2, ncols=2)
figure.set_size_inches(18,8)

sns.barplot(data=train, x="Pclass",y="Survived", ax=ax1)
sns.barplot(data=train, x="Sex",y="Survived", ax=ax2)
sns.barplot(data=train, x="Age",y="Survived", ax=ax3)
sns.barplot(data=train, x="Name",y="Survived", ax=ax4)

train['Name'].value_counts()
train_test_data=[train,test]
for dataset in train_test_data:
  dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\.', expand=False)
train['Title'].value_counts()

title_mapping = {"Mr":0,"Miss":1,"Mrs":2,
                "Master":3,"Dr":3,"Rev":3,"Col":3,
                "Major":3,"Mile":3,"Countess":3,"Ms":3,"Lady":3
                ,"Jonkheer":3,"Don":3,"Dona":3,"Mme":3,"Capt":3,"Sir":3}

for dataset in train_test_data:
  dataset['Title'] = dataset['Title'].map(title_mapping)

  def bar_chart(feature):
    survived = train[train['Survived']==1][feature].value_counts()
    dead = train[train['Survived']==0][feature].value_counts()
    df = pd.DataFrame([survived,dead])
    df.index = ['Survived','Dead']
    df.plot(kind='bar', stacked=True, figsize=(10,5))

for dataset in train_test_data:
  dataset['Cabin'] = dataset['Cabin'].str[:1]

cabin_mapping = {"A": 0, "B": 0.4, "C": 0.6,"D": 0.8,"E": 1.2,"F": 1.6,"G": 2,"T": 2.4 }
for dataset in train_test_data:
    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)

train["Cabin"].fillna(train.groupby("Pclass")["Cabin"].transform("median"), inplace=True)
test["Cabin"].fillna(test.groupby("Pclass")["Cabin"].transform("median"), inplace=True)

dataset.drop('Name',inplace=True, axis=1)

sex_mapping = {'male':0, 'female':1}
for dataset in train_test_data:
    dataset['Sex'] = dataset['Sex'].map(sex_mapping)

dataset.drop('Ticket',inplace=True, axis=1)
train["Age"].fillna(train.groupby("Sex")["Age"].transform("median"), inplace=True)
test["Age"].fillna(test.groupby("Sex")["Age"].transform("median"), inplace=True)

embark_mapping = {"Q": 0, "C": 1, "S": 2}
for dataset in train_test_data:
    dataset['Embarked'] = dataset['Embarked'].map(embark_mapping)

for dataset in train_test_data:
  dataset.loc[ train['Age'] <=16, 'Age'] =0,
  dataset.loc[ (train['Age'] >16), (train['Age'] <= 26), 'Age'] = 1,
  dataset.loc[ (train['Age'] >26), (train['Age'] <= 36), 'Age'] = 2,
  dataset.loc[ (train['Age'] >36), (train['Age'] <= 62), 'Age'] = 3,
  dataset.loc[ train['Age'] >62, 'Age'] =4


for dataset in train_test_data:
    dataset.loc[ dataset['Age'] <=16, 'Age'] =0,
    dataset.loc[ (dataset['Age'] >16)& (dataset['Age'] <= 26), 'Age'] = 1,
    dataset.loc[ (dataset['Age'] >26)& (dataset['Age'] <= 36), 'Age'] = 2,
    dataset.loc[ (dataset['Age'] >36)& (dataset['Age'] <= 62), 'Age'] = 3,
    dataset.loc[ dataset['Age'] >62, 'Age'] = 4


for dataset in train_test_data:
    dataset.loc[ dataset['Fare'] <=7, 'Fare'] =0,
    dataset.loc[ (dataset['Fare'] >7)& (dataset['Fare'] <= 14), 'Fare'] = 1,
    dataset.loc[ (dataset['Fare'] >14)& (dataset['Fare'] <= 31), 'Fare'] = 2,
    dataset.loc[ dataset['Fare'] >32, 'Fare'] = 3


    corrMatt = train[["Survived","Pclass","Title","Sex","Age","Fare","Embarked"]]
    corrMatt = corrMatt.corr()
    print(corrMatt)

    train['Embarked'] = np.where(pd.notnull(train['Embarked']) == True, train['Embarked'], train['Embarked'].mean())
    train['Title'] = np.where(pd.notnull(train['Title']) == True, train['Title'], train['Title'].mean())

    train.drop('Name',inplace=True, axis=1)


    feature = ["Pclass","Title","Sex","Age","Fare","Embarked"]

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
k_fold = KFold(n_splits=10, shuffle=True, random_state=0)

for var in feature:
    train[var] = train[var].astype("category")
    test[var] = test[var].astype("category")

X_train=train[feature]
Y_train=train['Survived']

Y_train.value_counts()





from sklearn.ensemble import RandomForestClassifier

X_train=train[feature]
Y_train=train['Survived']
model = RandomForestClassifier(n_estimators=100,
                            n_jobs=-1,
                            random_state=0)
scoring ='accuracy'

%time score = cross_val_score(model, X_train, Y_train, cv=k_fold, scoring=scoring)

print(score)
round(np.mean(score)*100, 2)

clf = SVC(C=1, kernel='rbf', coef0=1)
clf


scoring='accuracy'
score = cross_val_score(clf, X_train, Y_train, cv=k_fold, n_jobs=1, scoring=scoring)
print(score)
round(np.mean(score)*100,2)


clf = GaussianNB()
score = cross_val_score(clf, X_train, Y_train, cv=k_fold, n_jobs=1, scoring=scoring)
round(np.mean(score)*100,2)
